services:
  grouper-mcp:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: grouper-mcp:latest
    container_name: grouper-mcp-server

    ports:
      - "${PORT:-3000}:3000"

    environment:
      # Grouper Web Services Configuration
      GROUPER_BASE_URL: ${GROUPER_BASE_URL}
      GROUPER_USERNAME: ${GROUPER_USERNAME}
      GROUPER_PASSWORD: ${GROUPER_PASSWORD}
      GROUPER_ACT_AS_SUBJECT_ID: ${GROUPER_ACT_AS_SUBJECT_ID:-}
      GROUPER_ACT_AS_SUBJECT_SOURCE_ID: ${GROUPER_ACT_AS_SUBJECT_SOURCE_ID:-}
      GROUPER_ACT_AS_SUBJECT_IDENTIFIER: ${GROUPER_ACT_AS_SUBJECT_IDENTIFIER:-}

      # HTTPS Server Configuration
      PORT: 3000
      USE_HTTPS: ${USE_HTTPS:-true}
      SSL_CERT_PATH: /app/certs/cert.pem
      SSL_KEY_PATH: /app/certs/key.pem

      # Logging Configuration
      GROUPER_DEBUG: ${GROUPER_DEBUG:-false}
      GROUPER_LOG_DIR: /app/logs

    volumes:
      # SSL Certificates (read-only mount from host)
      - ./certs:/app/certs:ro

      # Logs (persistent named volume)
      - grouper-logs:/app/logs

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "node", "-e", "require('https').get('https://localhost:3000/health', {rejectUnauthorized: false}, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1));"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

    networks:
      - grouper-network

volumes:
  grouper-logs:
    driver: local

networks:
  grouper-network:
    driver: bridge
